package jlll.common;import java.io.Serializable;import java.util.Map;import java.util.WeakHashMap;import jlll.io.JlllSymbolNaming;/** * Created by IntelliJ IDEA. * User: naryzhny * Date: May 6, 2003 * Time: 4:34:53 PM * To change this template use Options | File Templates. */public class Symbol implements Serializable{    private static final long serialVersionUID = 3176952970569428659L;    private transient static Map<String,Symbol> intern = new WeakHashMap<String,Symbol>();    public static Symbol DOT = Symbol.intern(".");    public static Symbol TRUE = Symbol.intern("true");//    public static Symbol TRUE2 = Symbol.intern("#t");    public static Symbol FALSE = Symbol.intern("false");//    public static Symbol FALSE2 = Symbol.intern("#f");    public static Symbol NULL = Symbol.intern("null");    public static Symbol QUOTE = Symbol.intern("quote");    public static Symbol BEGIN = Symbol.intern("begin");    public static Symbol QUASIQUOTE = Symbol.intern("quasiquote");    public static Symbol UNQUOTE_SPLICING = Symbol.intern("unquote_splicing");    public static Symbol UNQUOTE = Symbol.intern("unquote");    public static Symbol EXLAMATION = Symbol.intern("exlamation");    public static Symbol SHARP = Symbol.intern("sharp");    public static Symbol STDIN = Symbol.intern("stdin");    public static Symbol STDOUT = Symbol.intern("stdout");    private String name = null;    private Symbol(String name)    {        this.name = name;    }    public static Symbol intern(String name)    {        Symbol ret = intern.get(name);        if(ret==null)        {            ret = new Symbol(name);            intern.put(name,ret);        }        return ret;    }    public String getName()    {        return name;    }    public String toString()    {        return JlllSymbolNaming.convertFromSymbolNameToOut(name);    }        public boolean equals(Object obj)    {        if(obj==null || !(obj instanceof Symbol)) return false;        return getName().equals(((Symbol)obj).getName());        //return this == obj;    }    @Override    public int hashCode()    {        return getName().hashCode();    }}